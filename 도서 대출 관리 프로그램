도서 대출 관리 프로그램의 리스트와 딕셔너리를 Python 코드로 구현해보겠습니다.

1. 도서 목록을 리스트로 구현
리스트 내의 각 도서는 딕셔너리 형태로 저장되며, 책의 고유 ID, 제목, 작가, 대출 일자, 대출-반납 상태를 포함합니다.



# 도서 목록 (리스트 안에 각 도서가 딕셔너리로 저장)
books = [
    {"id": "001", "title": "The Great Gatsby", "author": "F. Scott Fitzgerald", "date": "2024-09-06", "status": "대출 중"},
    {"id": "002", "title": "1984", "author": "George Orwell", "date": "2024-08-20", "status": "반납 완료"},
    {"id": "003", "title": "To Kill a Mockingbird", "author": "Harper Lee", "date": "2024-09-01", "status": "대출 중"}
]

# 도서 목록 출력
for book in books:
    print(f"ID: {book['id']}, 제목: {book['title']}, 작가: {book['author']}, 대출일자: {book['date']}, 상태: {book['status']}")


2. CRUD 기능 구현
1) Create (도서 입력)
새로운 도서를 추가하는 기능:
def create_book(books, book_id, title, author, date, status):
    new_book = {"id": book_id, "title": title, "author": author, "date": date, "status": status}
    books.append(new_book)

2) Update (대출 일자 및 대출-반납 상태 수정)
기존 도서의 대출 일자 및 대출-반납 상태를 수정하는 기능:

def update_book(books, book_id, new_date, new_status):
    for book in books:
        if book['id'] == book_id:
            book['date'] = new_date
            book['status'] = new_status
            break

3) Delete (도서 삭제)
책의 고유 ID를 기반으로 도서를 삭제하는 기능:

def delete_book(books, book_id):
    for book in books:
        if book['id'] == book_id:
            books.remove(book)
            break

def read_books(books):
    for book in books:
        print(f"ID: {book['id']}, 제목: {book['title']}, 작가: {book['author']}, 대출일자: {book['date']}, 상태: {book['status']}")

사용 예시

# 도서 추가
create_book(books, "004", "Pride and Prejudice", "Jane Austen", "2024-09-06", "대출 중")

# 도서 수정
update_book(books, "001", "2024-09-10", "반납 완료")

# 도서 삭제
delete_book(books, "002")

# 도서 목록 조회
read_books(books)

